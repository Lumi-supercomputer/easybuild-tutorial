ARG IMG_REGISTRY=docker.io
ARG IMG_ORG=easybuilders
ARG IMG_NAME=base
ARG IMG_TAG=centos7-eb4.2.1
# allow CI/CD to change all of the above
FROM ${IMG_REGISTRY}/${IMG_ORG}/${IMG_NAME}:${IMG_TAG}

# CPU_ARCH can be specified in the "docker build" command,
# for example: docker build --build-arg CPU_ARCH=haswell
ARG CPU_ARCH=haswell
# make sure CPU_ARCH is defined
RUN test -n "${CPU_ARCH}" || (echo "\$CPU_ARCH undefined, use 'docker build --build-arg CPU_ARCH=...'" && exit 1)
# verify provided CPU_ARCH value, should match with what archspec produces
RUN export HOST_CPU_ARCH=$(python3 -c 'import archspec.cpu; print(archspec.cpu.host())') && \
  (test "${CPU_ARCH}" == "$HOST_CPU_ARCH" || (echo "Host CPU arch '${HOST_CPU_ARCH}' doesn't match specified CPU arch '${CPU_ARCH}'!" && exit 1))
# use $CPU_ARCH to define label and set it as environment variable (to use in subsequent builds
LABEL cpu_arch=${CPU_ARCH}
ENV CPU_ARCH=${CPU_ARCH}

# use 'docker build --build-arg EASYCONFIG=example.eb' to make EasyBuild install something else
ARG EASYCONFIG=SciPy-bundle-2020.03-foss-2020a-Python-3.8.2.eb

# use /easybuild for everything that should persist in the container (software, modules and sources)
# everything else goes in /scratch, which will be cleaned out
RUN  ml use /easybuild/modules/all \
  && ml EasyBuild \
  && eb --prefix /scratch --installpath /easybuild ${EASYCONFIG} --robot --trace \
  # clean up everything in /scratch
  && rm -rf /scratch/* \
  && ml EasyBuild \
  && ml unuse /easybuild/modules/all
